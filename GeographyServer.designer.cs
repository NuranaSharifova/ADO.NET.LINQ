#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ADO.NET.LINQ
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Geography")]
	public partial class GeographyServerDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCITy(CITy instance);
    partial void UpdateCITy(CITy instance);
    partial void DeleteCITy(CITy instance);
    partial void InsertCONTINENT(CONTINENT instance);
    partial void UpdateCONTINENT(CONTINENT instance);
    partial void DeleteCONTINENT(CONTINENT instance);
    partial void InsertCOUNTRy(COUNTRy instance);
    partial void UpdateCOUNTRy(COUNTRy instance);
    partial void DeleteCOUNTRy(COUNTRy instance);
    #endregion
		
		public GeographyServerDataContext() : 
				base(global::ADO.NET.LINQ.Properties.Settings.Default.GeographyConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public GeographyServerDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GeographyServerDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GeographyServerDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GeographyServerDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<CITy> CITies
		{
			get
			{
				return this.GetTable<CITy>();
			}
		}
		
		public System.Data.Linq.Table<CONTINENT> CONTINENTs
		{
			get
			{
				return this.GetTable<CONTINENT>();
			}
		}
		
		public System.Data.Linq.Table<COUNTRy> COUNTRies
		{
			get
			{
				return this.GetTable<COUNTRy>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CITIES")]
	public partial class CITy : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _NAME;
		
		private int _COUNTRYID;
		
		private int _POPULATION_;
		
		private bool _CAPITAL;
		
		private EntityRef<COUNTRy> _COUNTRy;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNAMEChanging(string value);
    partial void OnNAMEChanged();
    partial void OnCOUNTRYIDChanging(int value);
    partial void OnCOUNTRYIDChanged();
    partial void OnPOPULATION_Changing(int value);
    partial void OnPOPULATION_Changed();
    partial void OnCAPITALChanging(bool value);
    partial void OnCAPITALChanged();
    #endregion
		
		public CITy()
		{
			this._COUNTRy = default(EntityRef<COUNTRy>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NAME", DbType="NVarChar(50)")]
		public string NAME
		{
			get
			{
				return this._NAME;
			}
			set
			{
				if ((this._NAME != value))
				{
					this.OnNAMEChanging(value);
					this.SendPropertyChanging();
					this._NAME = value;
					this.SendPropertyChanged("NAME");
					this.OnNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_COUNTRYID", DbType="Int NOT NULL")]
		public int COUNTRYID
		{
			get
			{
				return this._COUNTRYID;
			}
			set
			{
				if ((this._COUNTRYID != value))
				{
					if (this._COUNTRy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCOUNTRYIDChanging(value);
					this.SendPropertyChanging();
					this._COUNTRYID = value;
					this.SendPropertyChanged("COUNTRYID");
					this.OnCOUNTRYIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_POPULATION_", DbType="Int NOT NULL")]
		public int POPULATION_
		{
			get
			{
				return this._POPULATION_;
			}
			set
			{
				if ((this._POPULATION_ != value))
				{
					this.OnPOPULATION_Changing(value);
					this.SendPropertyChanging();
					this._POPULATION_ = value;
					this.SendPropertyChanged("POPULATION_");
					this.OnPOPULATION_Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CAPITAL", DbType="Bit NOT NULL")]
		public bool CAPITAL
		{
			get
			{
				return this._CAPITAL;
			}
			set
			{
				if ((this._CAPITAL != value))
				{
					this.OnCAPITALChanging(value);
					this.SendPropertyChanging();
					this._CAPITAL = value;
					this.SendPropertyChanged("CAPITAL");
					this.OnCAPITALChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="COUNTRy_CITy", Storage="_COUNTRy", ThisKey="COUNTRYID", OtherKey="ID", IsForeignKey=true)]
		public COUNTRy COUNTRy
		{
			get
			{
				return this._COUNTRy.Entity;
			}
			set
			{
				COUNTRy previousValue = this._COUNTRy.Entity;
				if (((previousValue != value) 
							|| (this._COUNTRy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._COUNTRy.Entity = null;
						previousValue.CITies.Remove(this);
					}
					this._COUNTRy.Entity = value;
					if ((value != null))
					{
						value.CITies.Add(this);
						this._COUNTRYID = value.ID;
					}
					else
					{
						this._COUNTRYID = default(int);
					}
					this.SendPropertyChanged("COUNTRy");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CONTINENTS")]
	public partial class CONTINENT : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _NAME;
		
		private EntitySet<COUNTRy> _COUNTRies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNAMEChanging(string value);
    partial void OnNAMEChanged();
    #endregion
		
		public CONTINENT()
		{
			this._COUNTRies = new EntitySet<COUNTRy>(new Action<COUNTRy>(this.attach_COUNTRies), new Action<COUNTRy>(this.detach_COUNTRies));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NAME", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string NAME
		{
			get
			{
				return this._NAME;
			}
			set
			{
				if ((this._NAME != value))
				{
					this.OnNAMEChanging(value);
					this.SendPropertyChanging();
					this._NAME = value;
					this.SendPropertyChanged("NAME");
					this.OnNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CONTINENT_COUNTRy", Storage="_COUNTRies", ThisKey="ID", OtherKey="CONTINENTID")]
		public EntitySet<COUNTRy> COUNTRies
		{
			get
			{
				return this._COUNTRies;
			}
			set
			{
				this._COUNTRies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_COUNTRies(COUNTRy entity)
		{
			this.SendPropertyChanging();
			entity.CONTINENT = this;
		}
		
		private void detach_COUNTRies(COUNTRy entity)
		{
			this.SendPropertyChanging();
			entity.CONTINENT = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.COUNTRIES")]
	public partial class COUNTRy : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _NAME;
		
		private int _CONTINENTID;
		
		private int _AREA;
		
		private EntitySet<CITy> _CITies;
		
		private EntityRef<CONTINENT> _CONTINENT;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNAMEChanging(string value);
    partial void OnNAMEChanged();
    partial void OnCONTINENTIDChanging(int value);
    partial void OnCONTINENTIDChanged();
    partial void OnAREAChanging(int value);
    partial void OnAREAChanged();
    #endregion
		
		public COUNTRy()
		{
			this._CITies = new EntitySet<CITy>(new Action<CITy>(this.attach_CITies), new Action<CITy>(this.detach_CITies));
			this._CONTINENT = default(EntityRef<CONTINENT>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NAME", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string NAME
		{
			get
			{
				return this._NAME;
			}
			set
			{
				if ((this._NAME != value))
				{
					this.OnNAMEChanging(value);
					this.SendPropertyChanging();
					this._NAME = value;
					this.SendPropertyChanged("NAME");
					this.OnNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CONTINENTID", DbType="Int NOT NULL")]
		public int CONTINENTID
		{
			get
			{
				return this._CONTINENTID;
			}
			set
			{
				if ((this._CONTINENTID != value))
				{
					if (this._CONTINENT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCONTINENTIDChanging(value);
					this.SendPropertyChanging();
					this._CONTINENTID = value;
					this.SendPropertyChanged("CONTINENTID");
					this.OnCONTINENTIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AREA", DbType="Int NOT NULL")]
		public int AREA
		{
			get
			{
				return this._AREA;
			}
			set
			{
				if ((this._AREA != value))
				{
					this.OnAREAChanging(value);
					this.SendPropertyChanging();
					this._AREA = value;
					this.SendPropertyChanged("AREA");
					this.OnAREAChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="COUNTRy_CITy", Storage="_CITies", ThisKey="ID", OtherKey="COUNTRYID")]
		public EntitySet<CITy> CITies
		{
			get
			{
				return this._CITies;
			}
			set
			{
				this._CITies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CONTINENT_COUNTRy", Storage="_CONTINENT", ThisKey="CONTINENTID", OtherKey="ID", IsForeignKey=true)]
		public CONTINENT CONTINENT
		{
			get
			{
				return this._CONTINENT.Entity;
			}
			set
			{
				CONTINENT previousValue = this._CONTINENT.Entity;
				if (((previousValue != value) 
							|| (this._CONTINENT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CONTINENT.Entity = null;
						previousValue.COUNTRies.Remove(this);
					}
					this._CONTINENT.Entity = value;
					if ((value != null))
					{
						value.COUNTRies.Add(this);
						this._CONTINENTID = value.ID;
					}
					else
					{
						this._CONTINENTID = default(int);
					}
					this.SendPropertyChanged("CONTINENT");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CITies(CITy entity)
		{
			this.SendPropertyChanging();
			entity.COUNTRy = this;
		}
		
		private void detach_CITies(CITy entity)
		{
			this.SendPropertyChanging();
			entity.COUNTRy = null;
		}
	}
}
#pragma warning restore 1591
